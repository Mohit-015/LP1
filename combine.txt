import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        System.out.println("Scheduling Algorithm Menu");
        System.out.println("1. First Come First Serve (FCFS)");
        System.out.println("2. Shortest Job First (SJF)");
        System.out.println("3. Priority");
         System.out.println("4. Round Robin");
        System.out.print("Choose an algorithm : ");
        int choice = s.nextInt();

        if (choice == 1) {
            fcfs(s);
        } else if (choice == 2) {
            sjf(s);
        } 
         else if (choice == 3) {
            Priority(s);
        }
         else if (choice == 4) {
            Round(s);
        } else {
            System.out.println("Invalid choice. Please select 1 or 2.");
        }
        
        s.close();
    }

    // FCFS Scheduling Algorithm
    public static void fcfs(Scanner s) {
        System.out.println("\nFirst Come First Serve Algorithm");
        System.out.print("Enter Number of Processes: ");
        int n = s.nextInt();
        int[] Process = new int[n];
        int[] Arrival = new int[n];
        int[] Burst = new int[n];
        int[] Waiting = new int[n];
        int[] Completion = new int[n];
        int[] TurnAround = new int[n];

        for (int i = 0; i < n; i++) {
            Process[i] = i + 1;
            System.out.print("Enter Arrival Time for Process " + (i + 1) + ": ");
            Arrival[i] = s.nextInt();
            System.out.print("Enter Burst Time: ");
            Burst[i] = s.nextInt();
        }

        System.out.println("---------------------------------------------------------------------");
        System.out.println("Process | Arrival | Burst | Completion | Turnaround | Waiting");
        System.out.println("---------------------------------------------------------------------");

        for (int i = 0; i < n; i++) {
            if (i == 0) Completion[0] = Burst[0] + Arrival[0];
            else Completion[i] = Math.max(Completion[i - 1], Arrival[i]) + Burst[i];
            
            TurnAround[i] = Completion[i] - Arrival[i];
            Waiting[i] = TurnAround[i] - Burst[i];

            System.out.println(Process[i] + "\t  " + Arrival[i] + "\t " + Burst[i] + "\t\t" + Completion[i] + "\t\t" + TurnAround[i] + "\t" + Waiting[i]);
        }
    }

    // SJF Scheduling Algorithm
    public static void sjf(Scanner s) {
        System.out.println("\nShortest Job First Algorithm");
        System.out.print("Enter Number of Processes: ");
        int n = s.nextInt();
        int[] Process = new int[n];
        int[] Arrival = new int[n];
        int[] Burst = new int[n];
        int[] Waiting = new int[n];
        int[] Completion = new int[n];
        int[] TurnAround = new int[n];

        for (int i = 0; i < n; i++) {
            Process[i] = i + 1;
            System.out.print("Enter Arrival Time for Process " + (i + 1) + ": ");
            Arrival[i] = s.nextInt();
            System.out.print("Enter Burst Time: ");
            Burst[i] = s.nextInt();
        }

        // Sorting processes based on Burst time for SJF
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (Burst[i] > Burst[j]) {
                    int tempBurst = Burst[i];
                    Burst[i] = Burst[j];
                    Burst[j] = tempBurst;
                    int tempP = Process[i];
                    Process[i] = Process[j];
                    Process[j] = tempP;
                    int tempAT = Arrival[i];
                    Arrival[i] = Arrival[j];
                    Arrival[j] = tempAT;
                }
            }
        }

        int WT_avg = 0, TAT_avg = 0;
        System.out.println("---------------------------------------------------------------------");
        System.out.println("Process | Arrival | Burst | Completion | Turnaround | Waiting");
        System.out.println("---------------------------------------------------------------------");

        for (int i = 0; i < n; i++) {
            if (i == 0) Completion[0] = Burst[0] + Arrival[0];
            else Completion[i] = Math.max(Completion[i - 1], Arrival[i]) + Burst[i];
            
            TurnAround[i] = Completion[i] - Arrival[i];
            Waiting[i] = TurnAround[i] - Burst[i];

            System.out.println(Process[i] + "\t  " + Arrival[i] + "\t " + Burst[i] + "\t\t" + Completion[i] + "\t\t" + TurnAround[i] + "\t" + Waiting[i]);
            
            WT_avg += Waiting[i];
            TAT_avg += TurnAround[i];
        }

        System.out.println("Stats:");
        System.out.println("Average Waiting Time: " + (double) WT_avg / n);
        System.out.println("Average Turnaround Time: " + (double) TAT_avg / n);
    }
    public static void Priority(Scanner s) {
        System.out.println("Priority Queue");
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a number of process: ");
        int sum = 0;
        float WT_avg = 0, TAT_avg = 0;
        int n = sc.nextInt();
        int p[] = new int[n];
        int AT[] = new int[n];
        int BT[] = new int[n];
        int CT[] = new int[n];
        int TAT[] = new int[n];
        int WT[] = new int[n];
        int prty[] = new int[n];
        for (int i = 0; i < p.length; i++) {
            System.out.println("Enter process [" + i + "]: ");
            p[i] = i+1;
            System.out.println("Enter Priority: ");
            prty[i] = sc.nextInt();
            System.out.println("Enter Arrival Time: ");
            AT[i] = sc.nextInt();
            System.out.println("Enter Burst Time: ");
            BT[i] = sc.nextInt();
        }
        for (int i = 0; i < p.length; i++) {
            for (int j = i + 1; j < p.length; j++) {
                if (prty[i] > prty[j]) {
                    int tempPrty = prty[i];
                    prty[i] = prty[j];
                    prty[j] = tempPrty;
                    int tempBT = BT[i];
                    BT[i] = BT[j];
                    BT[j] = tempBT;
                    int tempP = p[i];
                    p[i] = p[j];
                    p[j] = tempP;
                    int tempAT = AT[i];
                    AT[i] = AT[j];
                    AT[j] = tempAT;
                }
            }
        }
        System.out.println("-----------------------------------------------");
        System.out.println("Process\tArrival\tBurst\tPriority\tCompletion\tTurnAround\tWaiting");
        System.out.println("-----------------------------------------------");
        for (int i = 0; i < p.length; i++) {
            sum += BT[i];
            CT[i] = sum;
            TAT_avg += TAT[i] = CT[i] - AT[i];
            WT_avg += WT[i] = TAT[i] - BT[i];

            System.out.println("P" + p[i] + "\t" + AT[i] + "\t" + BT[i] + "\t\t" + prty[i] + "\t\t" + CT[i] + "\t"
                    + TAT[i] + "\t" + WT[i]);
        }
        System.out.println("-----------------------------------------------");
        System.out.println("Average Waitng Time: " + WT_avg / n);
        System.out.println("Average Turnaround time: " + TAT_avg / n);
     }
    public static void Round(Scanner s) {
        int n, i, qt, count = 0, temp, sq = 0, bt[], wt[], tat[], rem_bt[];
        float awt = 0, atat = 0;
        bt = new int[10];
        wt = new int[10];
        tat = new int[10];
        rem_bt = new int[10];
        // Scanner s = new Scanner(System.in);
        System.out.print("Enter the number of process: ");
        n = s.nextInt();
        System.out.print("Enter the burst time of the process\n");
        for (i = 0; i < n; i++) {
            System.out.print("P" + i + " = ");
            bt[i] = s.nextInt();
            rem_bt[i] = bt[i];
        }
        System.out.print("Enter the quantum time: ");
        qt = s.nextInt();
        while (true) {
            for (i = 0, count = 0; i < n; i++) {
                temp = qt;
                if (rem_bt[i] == 0) {
                    count++;
                    continue;
                }
                if (rem_bt[i] > qt)
                    rem_bt[i] = rem_bt[i] - qt;
                else if (rem_bt[i] >= 0) {
                    temp = rem_bt[i];
                    rem_bt[i] = 0;
                }
                sq = sq + temp;
                tat[i] = sq;
            }
            if (n == count)
                break;
        }
        System.out.print("------------------------------------------------------------------");
        System.out.print("\nProcess \t Burst Time\tTurnaround Time\t\tWaiting Time\n");
        System.out.print("-------------------------------------------------------------------");
        for (i = 0; i < n; i++) {
            wt[i] = tat[i] - bt[i];
            awt = awt + wt[i];
            atat = atat + tat[i];
            System.out.print("\n P" + (i + 1) + "\t\t\t" + bt[i] + "\t\t\t\t" + tat[i] + "\t\t\t\t" + wt[i] + "\n");
        }
        System.out.println("-------------------------------------------------------------------");
        awt = awt / n;
        atat = atat / n;
        System.out.println("\nAverage waiting Time = " + awt);
        System.out.println("Average turnaround time = " + atat);
    }
}
